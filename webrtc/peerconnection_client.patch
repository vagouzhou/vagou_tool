diff --git a/examples/peerconnection/client/flag_defs.h b/examples/peerconnection/client/flag_defs.h
index 986daf64ce..c684d950d9 100644
--- a/examples/peerconnection/client/flag_defs.h
+++ b/examples/peerconnection/client/flag_defs.h
@@ -21,6 +21,12 @@ extern const uint16_t kDefaultServerPort;  // From defaults.[h|cc]
 // header file so that they can be shared across the different main.cc's
 // for each platform.
 
+ABSL_FLAG(bool,
+          enablelog,
+          false,
+          "enable log"
+          "intervention.");
+
 ABSL_FLAG(bool,
           autoconnect,
           false,
diff --git a/examples/peerconnection/client/main.cc b/examples/peerconnection/client/main.cc
index cc8bdfbd76..6369be0f38 100644
--- a/examples/peerconnection/client/main.cc
+++ b/examples/peerconnection/client/main.cc
@@ -64,13 +64,18 @@ WindowsCommandLineArguments::WindowsCommandLineArguments() {
   // iterate over the returned wide strings;
   for (int i = 0; i < argc; ++i) {
     args_.push_back(rtc::ToUtf8(wide_argv[i], wcslen(wide_argv[i])));
-    // make sure the argv array points to the string data.
-    argv_.push_back(const_cast<char*>(args_.back().c_str()));
   }
+
+  // make sure the argv array points to the string data.
+  std::for_each(args_.begin(), args_.end(), [this](std::string& item) {
+    argv_.push_back(const_cast<char*>(item.c_str()));
+   });
   LocalFree(wide_argv);
 }
 
 }  // namespace
+
+#include "rtc_base/event_tracer.h"
 int PASCAL wWinMain(HINSTANCE instance,
                     HINSTANCE prev_instance,
                     wchar_t* cmd_line,
@@ -98,7 +103,11 @@ int PASCAL wWinMain(HINSTANCE instance,
     printf("Error: %i is not a valid port.\n", absl::GetFlag(FLAGS_port));
     return -1;
   }
-
+  bool enable_log = absl::GetFlag(FLAGS_enablelog);
+  if (enable_log) {
+    rtc::tracing::SetupInternalTracer();
+    rtc::tracing::StartInternalCapture("c://tmp/webrtc.txt");
+  }
   const std::string server = absl::GetFlag(FLAGS_server);
   MainWnd wnd(server.c_str(), absl::GetFlag(FLAGS_port),
               absl::GetFlag(FLAGS_autoconnect), absl::GetFlag(FLAGS_autocall));
@@ -133,5 +142,8 @@ int PASCAL wWinMain(HINSTANCE instance,
   }
 
   rtc::CleanupSSL();
+  if (enable_log) {
+    rtc::tracing::ShutdownInternalTracer();
+  }
   return 0;
 }
